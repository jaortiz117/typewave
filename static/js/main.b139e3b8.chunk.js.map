{"version":3,"sources":["tw-logo.png","logo.svg","NavigationBar.js","components/TextBox.js","components/Result.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","NavigationBar","Navbar","bg","Brand","href","alt","src","icon","width","height","className","TextBox","props","reset","e","setState","input","finished","inserted","textEntered","startTime","finalTime","wpm","errors","currIdx","started","handleInput","target","value","state","Date","now","slice","length","quote","pop","push","updateColors","idx","word","smallest","Math","min","wordRefs","classList","remove","innerHTML","errorsInWord","i","char","charAt","inner","textLength","innerText","setCharAt","errorCounter","err","str","index","chr","substr","calcErrors","result","map","n","calcWpm","words","totalTime","floor","bind","getQuote","renderLetters","finishHandler","this","randomWords","max","id","ref","onFinish","placeholder","onChange","autoFocus","React","Component","Result","useState","show","setShow","handleClose","onClose","Function","setTimeout","Fragment","Modal","onHide","onEscapeKeyDown","dialogClassName","Header","closeButton","Title","Body","ListGroup","variant","items","label","name","data","Item","key","Home","showResults","setShowResults","results","setResults","resultToggle","window","location","reload","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b139e3b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tw-logo.2001f2e6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport { ReactComponent as GithubSvg } from 'simple-icons/icons/github.svg'\r\n\r\nimport icon from './tw-logo.png';\r\n\r\nconst Styles = styled.div`\r\n.bg-indigo{\r\n  background-color: #003d5bff;\r\n}\r\n\r\n.nav-title{\r\n  color: white;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n}\r\n\r\n.svg{\r\n  fill: white;\r\n  height: 40px;\r\n  width: 40px;\r\n}\r\n`;\r\n\r\nexport function NavigationBar(){\r\n  return (\r\n    <Styles>\r\n      <Navbar bg=\"indigo\">\r\n        <Navbar.Brand href=\"#home\">\r\n          <img\r\n            alt=\"\"\r\n            src={icon}\r\n            width=\"60\"\r\n            height=\"60\"\r\n            className=\"d-inline-block align-top\"\r\n            />{' '}\r\n          </Navbar.Brand>\r\n          <Navbar.Brand className=\"nav-title\">\r\n            typewave.\r\n          </Navbar.Brand>\r\n          <Navbar.Brand\r\n            href=\"https://github.com/jaortiz117/typing-test-pwa\"\r\n            className=\"ml-auto\">\r\n            <GithubSvg className='svg' />\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n      </Styles>\r\n    );\r\n  }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport randomWords from \"random-words\";\r\n\r\nconst Styles = styled.div`\r\n.bg-indigo{\r\n  background-color: #003d5bff;\r\n}\r\n\r\n.title{\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(12px + 2vmin);\r\n}\r\n\r\n.seaweed{\r\n  color: #00798c;\r\n}\r\n\r\n.sunray{\r\n  color: #edae49ff;\r\n}\r\n\r\n.input_area {\r\n  height: 80px;\r\n  width: 40%;\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  margin: 15px;\r\n  padding: 20px;\r\n  border: 0px;\r\n  box-shadow: black 5px 8px 5px;\r\n}\r\n\r\n.brick{\r\n  color: #D1495B;\r\n}\r\n\r\n.lapis{\r\n  color: #30638eff;\r\n}\r\n\r\n.text{\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: left;\r\n  font-size: 1.5rem;\r\n  margin: 10px;\r\n  padding: 25px;\r\n}\r\n}\r\n`;\r\n\r\nexport class TextBox extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: '',\r\n      finished: false,\r\n      inserted: [],\r\n      quote: [\"loading\", \"please\", \"wait\"],\r\n      textEntered: false,\r\n      startTime: null,\r\n      finalTime: null,\r\n      wpm: 0,\r\n      errors: [],\r\n      currIdx: 0,\r\n      started: false\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.getQuote = this.getQuote.bind(this);\r\n    this.updateColors = this.updateColors.bind(this);\r\n    this.renderLetters = this.renderLetters.bind(this);\r\n    this.errorCounter = this.errorCounter.bind(this);\r\n    this.finishHandler = this.finishHandler.bind(this);\r\n\r\n    this.wordRefs = [];\r\n  }\r\n\r\n  getQuote(){\r\n    this.setState({quote: randomWords({ min: 30, max: 45 })})\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getQuote();\r\n  }\r\n\r\n  reset = (e) => {\r\n    this.setState({\r\n      input: '',\r\n      finished: false,\r\n      inserted: [],\r\n      textEntered: false,\r\n      startTime: null,\r\n      finalTime: null,\r\n      wpm: 0,\r\n      errors: [],\r\n      currIdx: 0,\r\n      started: false\r\n    });\r\n    // this.getQuote();\r\n    //TODO reset function bound to a key (left ctrl maybe) resets word list without refresh\r\n    // return focus to input\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    var input = e.target.value;\r\n    const textEntered = input !== '';\r\n\r\n    if(!this.state.started){\r\n      this.setState({\r\n        started: true,\r\n        startTime: Date.now()\r\n      })\r\n    }\r\n\r\n    if(input.slice(-1) === \" \"){\r\n      if(this.state.inserted.length >= this.state.quote.length){\r\n        this.setState({\r\n          finished: true,\r\n          started:false,\r\n          finalTime: Date.now()\r\n        });\r\n      }\r\n      this.setState({currIdx: this.state.currIdx + 1});\r\n      input = ''\r\n      e.target.value = ''\r\n    }\r\n    else{\r\n      this.state.inserted.pop();\r\n    }\r\n    this.state.inserted.push(input);\r\n\r\n    this.setState({ input, textEntered });\r\n  }\r\n\r\n  updateColors = () => {\r\n    const idx = this.state.currIdx;\r\n    const word = this.state.inserted[idx];\r\n    try{\r\n      const smallest = Math.min(word.length, this.state.quote[idx].length);\r\n      this.wordRefs[idx].classList.remove('lapis');\r\n      this.wordRefs[idx].classList.remove('brick');\r\n      this.wordRefs[idx].innerHTML = this.state.quote[idx] + \" \";\r\n\r\n      var errorsInWord = 0;\r\n\r\n      for(var i=0; i<smallest; i++){\r\n        var char = this.state.quote[idx].charAt(i);\r\n\r\n        const inner = this.wordRefs[idx].innerHTML;\r\n        var textLength = this.wordRefs[idx].innerText.length;\r\n\r\n        if(idx === this.wordRefs.length - 1){\r\n          textLength = textLength + 1;\r\n        }\r\n\r\n        if(word.charAt(i) === this.state.quote[idx].charAt(i)){\r\n          this.wordRefs[idx].innerHTML = this.setCharAt(inner, inner.length - textLength + i, \"<span class=\\\"sunray\\\">\"+ char+ \"</span>\");\r\n        }\r\n        if(word.charAt(i) !== this.state.quote[idx].charAt(i)){\r\n          this.wordRefs[idx].innerHTML = this.setCharAt(inner, inner.length - textLength + i, \"<span class=\\\"brick\\\">\"+ char+ \"</span>\");\r\n\r\n          errorsInWord += 1;\r\n        }\r\n      }\r\n      this.errorCounter(idx, errorsInWord);\r\n    }\r\n    catch(err){\r\n      return\r\n    }\r\n  }\r\n\r\n  errorCounter = (idx, errors) => {\r\n    if(typeof this.state.errors[idx] === 'undefined'){\r\n      this.state.errors.push(errors);\r\n    }\r\n    else{\r\n      this.state.errors[idx] = errors;\r\n    }\r\n  }\r\n\r\n  setCharAt = (str,index,chr) => {\r\n    if(index > str.length-1) return str;\r\n    return str.substr(0,index) + chr + str.substr(index+1);\r\n  }\r\n\r\n  renderLetters(){\r\n    this.updateColors();\r\n    return(\r\n      <div>\r\n        {\r\n          this.state.quote.map((word, idx) =>\r\n          <span id=\"word\" ref={(ref) => {this.wordRefs[idx] = ref; return true;}}>{word} </span>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\ncalcErrors = () => {\r\n  var result = 0;\r\n\r\n  this.state.errors.map((n) => {\r\n    result += n;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\ncalcWpm = () => {\r\n  const words = this.state.quote.length;\r\n  const totalTime = (this.state.finalTime - this.state.startTime) / 1000;\r\n\r\n  return Math.floor((words / totalTime) * 60);\r\n}\r\n\r\nfinishHandler(){\r\n  if(this.state.finished){\r\n    const errors = this.calcErrors();\r\n    const wpm = this.calcWpm();\r\n    this.props.onFinish(errors, wpm);\r\n    this.reset()\r\n  }\r\n}\r\n\r\nrender(){\r\n  return (\r\n    <Styles>\r\n      <div className=\"text seaweed\">\r\n        {this.renderLetters()}\r\n        {this.finishHandler()}\r\n      </div>\r\n      <input className=\" bg-indigo lapis input_area\"\r\n        placeholder=\"start typing here...\"\r\n        onChange={ this.handleInput }\r\n        autoFocus={true}\r\n        >\r\n      </input>\r\n    </Styles>\r\n  );\r\n}\r\n}\r\n\r\n// inspiration:\r\n// https://typing.works/\r\n// https://monkey-type.com/\r\n","import React, { useState } from 'react';\r\nimport { ListGroup, Modal } from 'react-bootstrap';\r\nimport './Result.css'\r\n\r\nexport function Result(props){\r\n  const [show, setShow] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    if(props.onClose instanceof Function){\r\n      setTimeout(props.onClose, 0);\r\n    }\r\n  }\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        onEscapeKeyDown={handleClose}\r\n        dialogClassName=\"bg-indigo result-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Results: </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ListGroup variant=\"flush\" className=\"bg-indigo\">\r\n            {props.items.map(({label, name, data}) =>(\r\n              <ListGroup.Item className=\"list-indigo\" key={name}>\r\n                {label}: {data}\r\n              </ListGroup.Item>\r\n            ))}\r\n          </ListGroup>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nimport { TextBox } from './components/TextBox'\r\nimport { Result } from './components/Result'\r\n\r\nconst Styles = styled.div`\r\ntext-align: center;\r\n\r\n.bg-indigo{\r\n  background-color: #003d5bff;\r\n}\r\n\r\n.title{\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(12px + 2vmin);\r\n}\r\n\r\n.brick{\r\n  color: #D1495B;\r\n}\r\n\r\n.centerblock{\r\n  max-width: 1000px;\r\n  min-width: 600px;\r\n  margin: 0 auto;\r\n  align-items: center;\r\n}\r\n}\r\n`;\r\n\r\nexport function Home(){\r\n  // const [wpm, setWpm] = useState(0);\r\n  // const [errors, setErrors] = useState(0);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [results, setResults] = useState(null);\r\n\r\n  const resultToggle = () => {\r\n    if(showResults){\r\n      window.location.reload(false);\r\n      setShowResults(false);\r\n    }\r\n    else{\r\n      setShowResults(true);\r\n    }\r\n  }\r\n\r\n  const renderResults = () => {\r\n    if(!showResults){\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Result items={results} onClose={resultToggle}/>\r\n    );\r\n  }\r\n\r\n  const handleResult = (errors, wpm) => {\r\n    const items = [\r\n      {name: \"wpm\", label: \"WPM\", data: wpm},\r\n      {name: \"errors\", label: \"Mistakes\", data: errors}\r\n    ];\r\n\r\n    setResults(items);\r\n    resultToggle();\r\n  }\r\n\r\n  return (\r\n    <Styles>\r\n      {renderResults()}\r\n      <div className=\"title\">\r\n        Relax while typing.\r\n      </div>\r\n      <div className=\"centerblock\">\r\n        <TextBox onFinish={handleResult}/>\r\n      </div>\r\n    </Styles>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport styled from 'styled-components'\nimport { NavigationBar } from './NavigationBar'\nimport { Home } from './Home'\nimport './App.css';\n\nconst Styles = styled.div`{\n  background-color: #003d5bff;\n  min-height: 100vh;\n  color: white;\n\n  /*\n  * Footer\n  */\n  .foot {\n    position: fixed;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    color: white;\n    text-align: center;\n  }\n  .heart{\n    color: #e25555;\n  }\n}\n`;\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Styles>\n        <NavigationBar />\n        <Home />\n        <footer className=\"foot\">\n          <div>\n            <p>Made with <span className=\"heart\">&#9829;</span> in PR by\n              <a href=\"https://twitter.com/ogjavijavs\">@ogjavijavs</a>.</p>\n            </div>\n          </footer>\n        </Styles>\n      </React.Fragment>\n    );\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WebFont from 'webfontloader';\n\nimport './index.css';\n\nWebFont.load({\n  google: {\n    families: ['Titillium Web', 'sans-serif']\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}